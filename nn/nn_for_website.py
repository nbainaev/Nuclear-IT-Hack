# -*- coding: utf-8 -*-
"""Network_for_website.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1T1CuVKxK3T-2WZd5VbIMI28iZCigs4Hz
"""

import yolov5
import numpy as np
import torch
import torch.nn as nn
from PIL import ImageDraw, Image
from torchvision import transforms

DEVICE = 'cpu'
RESCALE_SIZE =299

def predict_one_sample(model, inputs, device=DEVICE):
    """Предсказание, для одной картинки"""

    with torch.no_grad():
        inputs = inputs.to(device)
        model.eval()
        logit = model(inputs).cpu()
        probs = torch.nn.functional.softmax(logit, dim=-1).numpy()
        max_prob = np.max(probs)
        y_pred = np.argmax(probs,-1)

    return y_pred, max_prob

def analyze(path):
    example_image = Image.open(path)
    example_image.load()
    prediction = []
    probability = []
    bboxes = []
    result = detector(example_image)
    result = result.crop(save=False)
    n_all_people = len(result)

    for imgs in result:
        if float(imgs['conf'].cpu().numpy()) >= 0.85:
            bbox = imgs['box']
            bbox = [float(val.cpu().numpy()) for val in bbox]
            example_image1 = example_image.crop(bbox)
            example_image1 = example_image.resize((RESCALE_SIZE, RESCALE_SIZE))
            example_image1 = np.array(np.array(example_image1) / 255, dtype='float32')
            transform = transforms.Compose([
                transforms.ToTensor(),
                transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225]),
            ])
            example_image1 = transform(example_image)

            pred, prop = predict_one_sample(classificator.to(DEVICE), example_image1.unsqueeze(0), device=DEVICE)

            if pred[0] == 1:
                bboxes.append(bbox)
                prediction.append(pred[0])
                probability.append(prop)

    draw = ImageDraw.Draw(example_image)

    for bbox in bboxes:
        draw.rectangle(tuple(bbox), outline="red", width=3)

    return example_image, n_all_people, len(prediction)

detector = yolov5.load('yolov5s.pt')

detector.conf = 0.25
detector.iou = 0.45
detector.agnostic = False
detector.multi_label = False
detector.max_det = 30
detector.classes = 0

classificator = torch.load("inceptionv3_model.pt", map_location=torch.device('cpu'))

# print(analyze("img.jpg"))
